openapi: 3.1.0
info:
  title: Elections Manager API Documentation
  version: 1.0.0
  description: An API backend service developed for Elections Manager and documented with swagger UI
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT.html
  contact:
    name: Chukwuemeka Ezeh
    url: #
    email: zaddycool@gmail.com
    phone: +2348065198300
servers:
  - url: http://localhost:8701/api/v1
    description: Development Server
tags:
  - name: Authentication
    description: User Authentication Endpoints
  - name: Elections
    description: Election Management Endpoints
  - name: Candidates
    description: Candidate Management Endpoints
  - name: Votes
    description: Vote Management Endpoints
  - name: Dashboard
    description: Dashboard Enpoints
components:
  schemas:
    error:
      type: boolean
    signUpDTO:
      type: object
      required:
        - user_firstname
        - user_lastname
        - user_email
        - user_ssn
        - password
      properties:
        user_firstname:
          type: string
          description: User first name
        user_lastname:
          type: string
          description: User last name
        user_email:
          type: string
          description: Email of user
        user_ssn:
          type: string
          description: User Social Security number
        password:
          type: string
          description: Very strong password
      example:
        user_firstname: Jon
        user_lastname: Snow
        user_email: jonsnow@example.com
        user_ssn: 27382-283748-74647
        password: strongpass
    loginDTO:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User stored password
      example:
        email: jonsnow@example.com
        password: strongpass
    electionDTO:
      type: object
      required:
        - election_title
      properties:
        election_title:
          type: string
    candidateDTO:
      type: object
      required: 
        - election_id
        - candidate_fullname
        - candidate_bio
        - avatar
      properties:
        election_id:
          type: integer
          description: Election ID
        candidate_fullname:
          type: string
          description: Candidate full name
        candidate_bio:
          type: string
          description: candidate Biography
        avatar:
          type: string
          format: binary
          description: Candidate Image
    voteDTO:
      type: object
      required: 
        - election_id
        - voter_id
        - candidate_id
      properties:
        election_id:
          type: integer
          description: Election ID
        candidate_id:
          type: integer
          description: Candidate ID
    messageResponse:
      type: object
      properties:
        error:
          type: boolean
          example: false
        message:
          type: string
    paginationResponse:
      type: object
      properties:
        totalRecords:
          type: integer
          description: Total number of records
        totalPages:
          type: integer
          description: Total number of pages
          nullable: true
        currentPage:
          type: integer
          description: Current page (null if there's no page detail)
          nullable: true
        itemsPerPage:
          type: integer
          description: Items per page (null if there's no page detail)
          nullable: true
        nextPage:
          type: "integer"
          description: Next page number (null if there's no next page)
          nullable: true
        prevPage:
          type: integer
          description: Previous page number (null if there's no previous page)
          nullable: true
    userResponse:
      type: object
      properties:
        user_id:
          type: integer
        user_firstname:
          type: string
        user_lastname:
          type: string
        user_email:
          type: string
        user_ssn:
          type: string
        user_Role: 
          type: string
        user_status:
          type: string
        user_created_at:
          type: string
        last_logged_in:
          type: string
    electionResponse:
      type: object
      properties:
        election_id:
          type: integer
        election_title:
          type: string
        election_slug:
          type: string
        election_created_at:
          type: string
        election_status:
          type: string
    candidateResponse:
      type: object
      properties:
        candidate_id:
          type: integer
        election_id:
          type: integer
        candidate_fullname:
          type: string
        candidate_bio:
          type: string
        candidate_avatar:
          type: string
        candidate_created_at:
          type: string
        candidate_status:
          type: string
        votes:
          type: integer
        rank:
          type: integer
    voteResponse:
      type: object
      properties:
        vote_id:
          type: integer
        election_id:
          type: integer
        candidate_id:
          type: integer
        ip_address:
          type: string
        user_agent:
          type: string
        vote_timesatmp:
          type: string
        voter_name:
          type: string
        election_title:
          type: string
        candidate_fullname:
          type: string 
    rankResponse:
      type: object
      properties:
        candidate_id:
          type: integer
        election_id:
          type: integer
        candidate_fullname:
          type: string
        election_title:
          type: string
        election_status:
          type: string
        votes:
          type: integer
    loginResponseData:
      type: object
      properties:
        error:
          type: boolean
          $ref: '#/components/schemas/error'
        user:
          type: object
          $ref: '#/components/schemas/userResponse'
        token:
          type: string
          format: jwt
          description: User authentication token for request
    dashboardResponse:
      type: object
      properties:
        activeUsers:
          type: integer
        inactiveUsers:
          type: integer
        activeCandidates:
          type: integer
        inactiveCandidates:
          type: integer
        activeElections:
          type: integer
        inactiveElections:
          type: integer
        total_votes:
          type: integer
    candidateResponseData:
      type: object
      properties:
        error:
          type: boolean
          $ref: '#/components/schemas/error'
        data:
          type: array
          items:
            $ref: '#/components/schemas/candidateResponse'
        paginationData:
          type: object
          $ref: '#/components/schemas/paginationResponse'
    electionResponseData:
      type: object
      properties:
        error:
          type: boolean
          $ref: '#/components/schemas/error'
        data:
          type: array
          items:
            $ref: '#/components/schemas/electionResponse'
        paginationData:
          type: object
          $ref: '#/components/schemas/paginationResponse'
    voteResponseData:
      type: object
      properties:
        error:
          type: boolean
          $ref: '#/components/schemas/error'
        data:
          type: array
          items:
            $ref: '#/components/schemas/voteResponse'
        paginationData:
          type: object
          $ref: '#/components/schemas/paginationResponse'
    rankResponseData:
      type: object
      properties:
        error:
          type: boolean
          $ref: '#/components/schemas/error'
        data:
          type: array
          items:
            $ref: '#/components/schemas/rankResponse'
        paginationData:
          type: object
          $ref: '#/components/schemas/paginationResponse'
    dashboardResponseData:
      type: object
      properties:
        error:
          type: boolean
          $ref: '#/components/schemas/error'
        dashboard:
          $ref: '#/components/schemas/dashboardResponse'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-access-token
paths:
  /sign-up:
    post:
      summary: Signup endpoint
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signUpDTO'
      responses:
        200:
          description: Signup completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        500:
          description: Some server error
  /login:
    post:
      summary: Login endpoint
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginDTO'
      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginResponseData'
        500:
          description: Some server error
  /elections:
    post:
      summary: Election creating endpoint
      tags: [Elections]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/electionDTO'
      responses:
        200:
          description: Election created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        500:
          description: Some server error
    get: 
      summary: Get Elections
      tags: [Elections]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: election_status
          in: query
          required: false
          description: Election Status (optional)
          schema:
            type: string
            enum: [Active, Inactive]
        - name: page
          in: query
          required: false
          description: Page number (optional but compolsory if perPage is available)
          schema:
            type: integer
        - name: perPage
          in: query
          required: false
          description: Items per page (optional but compolsory if page is available)
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/electionResponseData'
        500:
          description: Server error
  /elections/{election_id}:
    put:
      summary: Election updating endpoint
      tags: [Elections]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: election_id
          in: path
          required: true
          description: Election ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/electionDTO'
      responses:
        200:
          description: Election updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        500:
          description: Some server error
    get: 
      summary: Get Single Election
      tags: [Elections]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: election_id
          in: path
          required: true
          description: Election ID
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    $ref: '#/components/schemas/error'
                  document:
                    $ref: '#/components/schemas/electionResponse'
        500:
          description: Server error
    delete: 
      summary: Delete Single Election
      tags: [Elections]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: election_id
          in: path
          required: true
          description: Election ID
          schema:
            type: integer
      responses:
        200:
          description: Election deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        500:
          description: Server error
  /candidates:
    post:
      summary: Candidate creating endpoint
      tags: [Candidates]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/candidateDTO'
      responses:
        200:
          description: Candidate created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        500:
          description: Some server error
    get: 
      summary: Get Candidates
      tags: [Candidates]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: election_id
          in: query
          required: false
          description: Election ID (optional)
          schema:
            type: integer
        - name: candidate_status
          in: query
          required: false
          description: Candidate Status (optional)
          schema:
            type: string
            enum: [Active, Inactive]
        - name: page
          in: query
          required: false
          description: Page number (optional but compolsory if perPage is available)
          schema:
            type: integer
        - name: perPage
          in: query
          required: false
          description: Items per page (optional but compolsory if page is available)
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidateResponseData'
        500:
          description: Server error
  /candidates/{candidate_id}:
    put:
      summary: Candidate updating endpoint
      tags: [Candidates]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: Candidate ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/candidateDTO'
      responses:
        200:
          description: Candidate updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        500:
          description: Some server error
    get: 
      summary: Get Single Candidate
      tags: [Candidates]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: Candidate ID
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    $ref: '#/components/schemas/error'
                  document:
                    $ref: '#/components/schemas/candidateResponse'
        500:
          description: Server error
    delete: 
      summary: Delete Single Candidate
      tags: [Candidates]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: Candidate ID
          schema:
            type: integer
      responses:
        200:
          description: Candidate deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        500:
          description: Server error
  /votes:
    post:
      summary: Vote Management endpoint
      tags: [Votes]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/voteDTO'
      responses:
        200:
          description: Vote casted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        500:
          description: Some server error
    get: 
      summary: Get Votes
      tags: [Votes]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: election_id
          in: query
          required: false
          description: Election ID (optional)
          schema:
            type: integer
        - name: voter_id
          in: query
          required: false
          description: Voter ID (optional)
          schema:
            type: integer
        - name: candidate_id
          in: query
          required: false
          description: candidate ID (optional)
          schema:
            type: integer
        - name: page
          in: query
          required: false
          description: Page number (optional but compolsory if perPage is available)
          schema:
            type: integer
        - name: perPage
          in: query
          required: false
          description: Items per page (optional but compolsory if page is available)
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/voteResponseData'
        500:
          description: Server error
  /votes/{vote_id}:
    get: 
      summary: Get Single Vote
      tags: [Votes]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: vote_id
          in: path
          required: true
          description: Vote ID
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    $ref: '#/components/schemas/error'
                  document:
                    $ref: '#/components/schemas/voteResponse'
        500:
          description: Server error
  /ranks:
    get: 
      summary: Get Ranks
      tags: [Votes]
      security:
        - ApiKeyAuth: []
      parameters:
        - name: election_id
          in: query
          required: false
          description: Election ID (optional)
          schema:
            type: integer
        - name: candidate_id
          in: query
          required: false
          description: candidate ID (optional)
          schema:
            type: integer
        - name: election_status
          in: query
          required: false
          description: Election Status (optional)
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number (optional but compolsory if perPage is available)
          schema:
            type: integer
        - name: perPage
          in: query
          required: false
          description: Items per page (optional but compolsory if page is available)
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rankResponseData'
        500:
          description: Server error
  /dashboard:
    get: 
      summary: Document Count Summary
      tags: [Dashboard]
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dashboardResponseData'
        500:
          description: Server error
  